/*
 * Copyright (c) 2019-2021 StarWishsama.
 *
 * 此源代码的使用受 GNU General Affero Public License v3.0 许可证约束, 欲阅读此许可证, 可在以下链接查看.
 *  Use of this source code is governed by the GNU AGPLv3 license which can be found through the following link.
 *
 * https://github.com/StarWishsama/Comet-Bot/blob/master/LICENSE
 *
 */

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/central/' }
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.20'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.20'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'com.github.gmazzo.buildconfig' version '3.0.1'
}

def mainClass = 'io.github.starwishsama.comet.CometApplication'
def miraiVersion = '2.7-M2-dev-1'

jar {
    manifest {
        attributes 'Main-Class': mainClass
        attributes 'Author': "StarWishsama"
    }
}

group 'io.github.starwishsama.comet'
version "0.6.2" + getGitBranchName() + getGitCommitID()

repositories {
    mavenCentral()
    google()
    maven { url 'https://maven.aliyun.com/nexus/content/repositories/central/' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.2.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation("net.mamoe:mirai-core-all:$miraiVersion")

    implementation 'cn.hutool:hutool-http:5.7.3'
    implementation 'cn.hutool:hutool-crypto:5.7.2'

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-io:1.3.2'

    // yamlkt @ https://github.com/him188/yamlkt
    implementation("net.mamoe.yamlkt:yamlkt:0.9.0")

    // jackson @ https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.12.3'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.12.3"
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.3'

    // CUrl
    implementation 'com.github.rockswang:java-curl:1.2.2.190107'

    // jsoup HTML parser library @ https://jsoup.org/
    implementation 'org.jsoup:jsoup:1.13.1'

    // Retrofit A type-safe HTTP client for Android and Java @ https://github.com/square/retrofit/
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'

    // Jline a Java library for handling console input @ https://github.com/jline/jline3
    implementation 'org.jline:jline:3.20.0'

    // Jansi needed by JLine
    implementation 'org.fusesource.jansi:jansi:2.3.3'

    // DNSJava used to srv lookup
    implementation 'dnsjava:dnsjava:3.4.0'
}

tasks {
    buildConfig {
        println "Comet >> Generating comet information....."

        packageName("io.github.starwishsama.comet")
        buildConfigField("String", "version", "\"${version}\"")
        buildConfigField("String", "buildTime", "\"${LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"))}\"")
        buildConfigField("String", "miraiVersion", "\"$miraiVersion\"")
    }
}

def getGitCommitID() {
    def gitCommit = "-UnknownCommit"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --short HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitCommit = "-" + result.text.trim()
        }
    } catch (ignored) {}

    return gitCommit
}

def getGitBranchName() {
    def gitBranch = "-UnknownBranch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = "-" + result.text.trim()
        }
    } catch (ignored) {}

    return gitBranch
}

shadowJar {
    dependsOn(generateBuildConfig)
    zip64 true
    exclude("META-INF/*.txt")
    exclude("META-INF/*.md")
    exclude("META-INF/CHANGES")
    exclude("META-INF/LICENSE")
    exclude("META-INF/NOTICE")
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
    println "Comet >> Welcome to Comet!"
    println "Comet >> Using Java " + System.getProperty("java.version") + " to build."
    println "Comet >> Now building Comet $version..."

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
        freeCompilerArgs = ["-Xopt-in=kotlin.RequiresOptIn", "-XXLanguage:+InlineClasses"]
        useIR = true
    }
}
