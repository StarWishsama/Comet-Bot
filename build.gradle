import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.21'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

def mainClass = 'io.github.starwishsama.comet.Comet'
def miraiVersion = '2.0-M2-2'
String buildTime

jar {
    manifest {
        attributes 'Main-Class': mainClass
        attributes 'Author': "StarWishsama"
    }
}

def gitCommitId = 'git rev-parse --short HEAD'
String versionCode = "0.6-M3-" + gitCommitId.execute().text.trim()

group 'io.github.starwishsama.comet'
version versionCode

processResources {
    buildTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"))
    println "Processing version code and other stuffs....."


    def versionFile = 'src/main/kotlin/io/github/starwishsama/comet/Versions.kt'
    ant.replace(file: versionFile, token: '@VERSION@', value: version)
    ant.replace(file: versionFile, token: '@BUILDTIME@', value: buildTime)
    ant.replace(file: versionFile, token: '@MIRAI@', value: miraiVersion)
}

jar.dependsOn processResources

repositories {
    maven { url 'https://jitpack.io' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    jcenter()
    mavenCentral()
    google()
}

dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation "net.mamoe:mirai-core-all:$miraiVersion"

    implementation 'cn.hutool:hutool-http:5.4.2'
    implementation 'cn.hutool:hutool-crypto:5.4.2'

    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.apache.commons:commons-io:1.3.2'

    implementation 'com.google.code.gson:gson:2.8.6'
    // yamlkt @ https://github.com/him188/yamlkt
    implementation("net.mamoe.yamlkt:yamlkt:0.7.5")
    // kotson @ https://github.com/SalomonBrys/Kotson
    implementation 'com.github.salomonbrys.kotson:kotson:2.5.0'

    // CUrl
    implementation 'com.github.rockswang:java-curl:1.2.2.2'

    // BiliBili-Api @ https://github.com/czp3009/bilibili-api
    api 'com.hiczp:bilibili-api:0.2.0'

    // jsoup HTML parser library @ https://jsoup.org/
    implementation 'org.jsoup:jsoup:1.13.1'

    // Retrofit A type-safe HTTP client for Android and Java @ https://github.com/square/retrofit/
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    // RomeTool for RSS @ https://github.com/rometools/rome
    implementation 'com.rometools:rome:1.15.0'
    implementation 'com.rometools:rome-utils:1.15.0'
    implementation 'com.rometools:rome-fetcher:1.15.0'

    // Selenium WebDriver @ https://www.selenium.dev/
    implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'

    //def console = '1.1.0'
    //compileOnly("net.mamoe:mirai-console:$console")
    
    // Jline a Java library for handling console input @ https://github.com/jline/jline3
    implementation 'org.jline:jline:3.18.0'

    // Jansi needed by JLine
    implementation 'org.fusesource.jansi:jansi:1.18'
}

shadowJar {
    zip64 true
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
        freeCompilerArgs = ["-Xopt-in=kotlin.RequiresOptIn", "-XXLanguage:+InlineClasses"]
    }
}
